// Copyright 2020 ETH Zurich and University of Bologna.
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Author: Matteo Perotti <mperotti@iis.ee.ethz.ch>

#include <stdint.h>
#include <string.h>

#include "../kernel/fft.h"
#include "runtime.h"

#ifndef SPIKE
#include "printf.h"
#else
#include <stdio.h>
#endif

#include "../kernel/support_data.h"
#include "util.h"

#ifndef WARM_CACHES_ITER
#define WARM_CACHES_ITER 1
#endif

extern unsigned long int NFFT;

extern float twiddle_vec_reim[] __attribute__((aligned(32 * NR_LANES), section(".l2")));
extern v2f            samples[] __attribute__((aligned(32 * NR_LANES), section(".l2")));
extern v2f          samples_s[] __attribute__((aligned(32 * NR_LANES), section(".l2")));
extern float   samples_reim_s[] __attribute__((aligned(32 * NR_LANES), section(".l2")));
extern float     samples_reim[] __attribute__((aligned(32 * NR_LANES), section(".l2")));

void warm_caches(uint64_t heat) {
  for (uint64_t k = 0; k < heat; ++k)
    fft_r2dif_vec(samples_reim_s, samples_reim_s + NFFT,
                twiddle_vec_reim, twiddle_vec_reim + ((NFFT >> 1) * (31 - __builtin_clz(NFFT))),
                mask_addr_vec, index_ptr, NFFT);
}

int main() {

#ifndef SPIKE
  // Warm-up caches
  warm_caches(WARM_CACHES_ITER);
#endif

  HW_CNT_READY;
  start_timer();
  fft_r2dif_vec(samples_reim, samples_reim + NFFT,
                twiddle_vec_reim, twiddle_vec_reim + ((NFFT >> 1) * (31 - __builtin_clz(NFFT))),
                mask_addr_vec, index_ptr, NFFT);
  stop_timer();

  int64_t runtime = get_timer();
  printf("[sw-cycles]: %ld\n", runtime);

  return 0;
}

// Copyright 2022 ETH Zurich and University of Bologna.
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Author: Matteo Perotti, ETH Zurich

#include <stdint.h>
#include <string.h>

#include "../kernel/wavelet.h"
#include "runtime.h"

#ifndef SPIKE
#include "printf.h"
#else
#include <stdio.h>
#endif

#ifndef WARM_CACHES_ITER
#define WARM_CACHES_ITER 1
#endif

// For benchmarking purposes
#define FILTER_COEFF 2

extern uint64_t DWT_LEN;
extern float data_s[] __attribute__((aligned(4 * NR_LANES)));
extern float data_v[] __attribute__((aligned(4 * NR_LANES)));
extern float    buf[] __attribute__((aligned(4 * NR_LANES)));

void warm_caches(uint64_t heat) {
  for (uint64_t k = 0; k < heat; ++k)
    gsl_wavelet_transform_vector(data_s, DWT_LEN, buf, 0);
}

int main() {
  int64_t runtime;
  float performance, max_performance, max_performance_stride_bw;
  float bw, stride_bw, dwt_eff_stride_bw;
  float arith_intensity;
  uint64_t num_ops, num_bytes;
  int error = 0;
  int first_iter_only;

#ifndef SPIKE
  // Warm-up caches
  warm_caches(WARM_CACHES_ITER);
#endif

  first_iter_only = 0;

  HW_CNT_READY;
  start_timer();
  gsl_wavelet_transform_vector(data_v, DWT_LEN, buf, first_iter_only);
  stop_timer();

  // Number of cycles
  runtime = get_timer();
  // DWT iterates for log2(N) steps
  num_ops = 0;
  for (int n = DWT_LEN; n >= 2; n >>= 1) {
    num_ops += ((2*FILTER_COEFF)-1) * n;
  }
  // Bytes from/to memory
  // Account also for the n/2 memcpy (n mem ops because of it!)
  num_bytes = 0;
  for (int n = DWT_LEN; n >= 2; n >>= 1) {
    num_bytes += 2 * sizeof(float) * n + sizeof(float) * n;
  }
  printf("[sw-cycles]: %ld\n", runtime);

  return 0;
}

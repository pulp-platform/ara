// Copyright 2022 ETH Zurich and University of Bologna.
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Author: Matteo Perotti <mperotti@iis.ee.ethz.ch>

#include <stdint.h>
#include <string.h>

#include "runtime.h"
#include "util.h"

#include "../kernel/fdotproduct.h"

#ifndef SPIKE
#include "printf.h"
#else
#include <stdio.h>
#endif

#ifndef WARM_CACHES_ITER
#define WARM_CACHES_ITER 1
#endif

// data type
#ifndef dtype
#error "Define a dtype to benchmark fdotproduct! [double|float|_Float16]"
#endif

// Vector size in bytes
extern uint64_t vsize;
// Input vectors
extern double   v64a[] __attribute__((aligned(32 * NR_LANES), section(".l2")));
extern double   v64b[] __attribute__((aligned(32 * NR_LANES), section(".l2")));
extern float    v32a[] __attribute__((aligned(32 * NR_LANES), section(".l2")));
extern float    v32b[] __attribute__((aligned(32 * NR_LANES), section(".l2")));
extern _Float16 v16a[] __attribute__((aligned(32 * NR_LANES), section(".l2")));
extern _Float16 v16b[] __attribute__((aligned(32 * NR_LANES), section(".l2")));
// Output scalar
extern double   res64_v;
extern float    res32_v;
extern _Float16 res16_v;
// Dummy scalar to check the datatype
dtype r;

void warm_caches(uint64_t heat) {
  for (uint64_t k = 0; k < heat; ++k)
    fdotp_v64b(v64a, v64b, 128);
}

int main() {

#ifndef SPIKE
  // Warm-up caches
  warm_caches(WARM_CACHES_ITER);
#endif

  uint64_t v_sw_runtime;
  size_t avl = vsize;

  HW_CNT_READY;
  // This benchmark is executed for one dtype only to ensure the same initial conditions.
  // If not, Ara would reshuffle some registers because of different EEWs and this would
  // lead to artificial slow-down
  if (sizeof(r) == 8) {
    start_timer();
    res64_v = fdotp_v64b(v64a, v64b, avl);
    stop_timer();
  } else
  if (sizeof(r) == 4) {
    start_timer();
    res32_v = fdotp_v32b(v32a, v32b, avl);
    stop_timer();
  } else
  if (sizeof(r) == 2) {
    start_timer();
    res16_v = fdotp_v16b(v16a, v16b, avl);
    stop_timer();
  }

  v_sw_runtime = get_timer();
  printf("[sw-cycles]: %ld\n", v_sw_runtime);

  return 0;
}

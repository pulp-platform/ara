// Copyright 2020 ETH Zurich and University of Bologna.
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Author: Matheus Cavalcante, ETH Zurich
//         Samuel Riedel, ETH Zurich

// Define Matrix dimensions:
// C = AB with A=[MxN], B=[NxP], C=[MxP]

#include "../kernel/fmatmul.h"

#ifndef WARM_CACHES_ITER
#define WARM_CACHES_ITER 1
#endif

// Define Matrix dimensions:
// C = AB with A=[MxN], B=[NxP], C=[MxP]
extern uint64_t M;
extern uint64_t N;
extern uint64_t P;

extern double a[] __attribute__((aligned(32 * NR_LANES), section(".l2")));
extern double b[] __attribute__((aligned(32 * NR_LANES), section(".l2")));
extern double c[] __attribute__((aligned(32 * NR_LANES), section(".l2")));

void warm_caches(uint64_t heat) {
  volatile double *a_ = a;
  volatile double buf;

  for (uint64_t k = 0; k < heat; ++k)
    fmatmul(c, a, b, M, N, P);
    // Vector stores have invalidated the A mtx cache lines!
    // Fetch them again
    for (int m = 0; m < M; ++m) {
      buf = (volatile double) *a_;
      a_ += N;
    }
}

int main() {

#ifndef SPIKE
  // Warm-up caches
  warm_caches(WARM_CACHES_ITER);
#endif

  // Measure runtime with a hot cache
  HW_CNT_READY;
  start_timer();
  fmatmul(c, a, b, M, N, P);
  stop_timer();

  int64_t runtime = get_timer();
  float performance = 2.0 * M * N * P / runtime;
  printf("[sw-cycles]: %ld\n", runtime);

  return 0;
}

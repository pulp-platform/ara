// Copyright 2020 ETH Zurich and University of Bologna.
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Author: Matteo Perotti, ETH Zurich

// Define Matrix dimensions:
// o = i Â° f, with i=[(M+F-1)x(N+f-1)xCH], f=[FxFxCH], o=[MxN]
// The filter is a square matrix, and F is odd

// Matrices defined in data.S

#include "../kernel/fconv3d.h"

#ifndef WARM_CACHES_ITER
#define WARM_CACHES_ITER 1
#endif

extern double i[] __attribute__((
    aligned(4 * NR_LANES))); // [ (M+floor(F/2)) * (N+floor(F/2)) * CH ]
extern double f[] __attribute__((aligned(4 * NR_LANES)));        // [ F*F*CH ]
extern double o[] __attribute__((aligned(4 * NR_LANES)));        // [ M*N ]
extern double golden_o[] __attribute__((aligned(4 * NR_LANES))); // [ M*N ]
// M, N, F defined in data.S
extern int64_t M;
extern int64_t N;
extern int64_t CH;
extern int64_t F;

void warm_caches(uint64_t heat) {
  volatile double buf;

  for (uint64_t k = 0; k < heat; ++k)
    fconv3d_CHx7x7(o, i, f, M, N, CH, F);
// The following artificial warming ensures, with a larger cache,
// not to experience any cache misses
#ifdef AD_HOC_WARMING
  for (uint64_t k = 0; k < F*F*CH; ++k)
    buf = (volatile double) *(&(f[k]));
  fconv3d_CHx7x7_warm(o, i, f, M, N, CH, F);
#endif
}

int main() {

#ifndef SPIKE
  // Warm-up caches
  warm_caches(WARM_CACHES_ITER);
#endif

  // Measure runtime with a hot cache
  HW_CNT_READY;
  start_timer();
  if (F == 7)
    fconv3d_CHx7x7(o, i, f, M, N, CH, F);
  else {
    printf("Error: the filter size is different from 7.\n");
    return -1;
  }
  stop_timer();

  int64_t runtime = get_timer();
  float performance = 2.0 * 3.0 * F * F * M * N / (runtime);
  printf("[sw-cycles]: %ld\n", runtime);

  return 0;
}

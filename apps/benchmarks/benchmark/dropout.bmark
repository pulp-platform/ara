// Copyright 2020 ETH Zurich and University of Bologna.
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Author: Matteo Perotti

// Include <riscv_vector.h> to use vector intrinsics
// Documentation: https://github.com/riscv/rvv-intrinsic-doc
// Compiler support:
// https://github.com/riscv/riscv-gnu-toolchain/tree/rvv-intrinsic
#include <riscv_vector.h>
#include <stdio.h>

#include "../kernel/dropout.h"
#include "runtime.h"

#ifndef SPIKE
#include "printf.h"
#endif

extern const unsigned int N;
extern const float I[];
extern const float SCALE;
extern const uint8_t SEL[];
extern float o[];
extern float o_gold[];

int main() {
  printf("\n");
  printf("=============\n");
  printf("=  DROPOUT  =\n");
  printf("=============\n");
  printf("\n");
  printf("\n");

  // Call the main kernel, and measure cycles
  start_timer();
  dropout_vec(N, I, SCALE, SEL, o);
  stop_timer();
  // Performance metrics
  int64_t runtime = get_timer();

  printf("[sw-cycles]: %ld\n", runtime);

  return 0;
}

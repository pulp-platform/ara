diff --git a/riscv/execute.cc b/riscv/execute.cc
index f0bb9463..8d31a51c 100644
--- a/riscv/execute.cc
+++ b/riscv/execute.cc
@@ -273,6 +273,10 @@ void processor_t::step(size_t n)
 
           insn_fetch_t fetch = mmu->load_insn(pc);
           if (debug && !state.serialized)
+            // mp-17: check if the instruction is a vector one
+            if ((disassembler->disassemble(fetch.insn))[0] == 'v') {
+              is_vec_insn = 1;
+            }
             disasm(fetch.insn);
           pc = execute_insn(this, pc, fetch);
           advance_pc();
diff --git a/riscv/interactive.cc b/riscv/interactive.cc
index ffc706bd..95b391a6 100644
--- a/riscv/interactive.cc
+++ b/riscv/interactive.cc
@@ -274,7 +274,7 @@ std::string sim_t::rin(boost::asio::streambuf *bout_ptr) {
     // output goes to socket
     sout_.rdbuf(bout_ptr);
   } else { // if we are not listening on a socket, get commands from terminal
-    s = readline(2); // 2 is stderr, but when doing reads it reverts to stdin
+    s = readline(0); // 2 is stderr, but when doing reads it reverts to stdin
     // output goes to stderr
     sout_.rdbuf(std::cerr.rdbuf());
   }
@@ -343,7 +343,7 @@ void sim_t::interactive()
 #ifdef HAVE_BOOST_ASIO
       s = rin(&bout); // get command string from socket or terminal
 #else
-      s = readline(2); // 2 is stderr, but when doing reads it reverts to stdin
+      s = readline(0); // 2 is stderr, but when doing reads it reverts to stdin
 #endif
     }
 
@@ -432,8 +432,23 @@ void sim_t::interactive_run(const std::string& cmd, const std::vector<std::strin
   size_t steps = args.size() ? atoll(args[0].c_str()) : -1;
   ctrlc_pressed = false;
   set_procs_debug(noisy);
-  for (size_t i = 0; i < steps && !ctrlc_pressed && !done(); i++)
+
+  // This is a hack, but we are always using core 0
+  processor_t *p = get_core("0");
+
+  for (size_t i = 0; i < steps && !ctrlc_pressed && !done(); i++) {
+    // Step forward
     step(1);
+    // Check if the fetched instruction was a vector one
+    if (p->is_vec_insn) {
+      // Print the whole F regfile
+      interactive_reg(cmd, {"0"});
+      // Print the whole F regfile
+      interactive_fregd_all(cmd, {"0"});
+      // Clear the flag
+      p->is_vec_insn = 0;
+    }
+  }
 
   std::ostream out(sout_.rdbuf());
   if (!noisy) out << ":" << std::endl;
@@ -614,6 +629,30 @@ void sim_t::interactive_freg(const std::string& cmd, const std::vector<std::stri
   out << std::hex << "0x" << std::setfill ('0') << std::setw(16) << r.v[1] << std::setw(16) << r.v[0] << std::endl;
 }
 
+// mp-17: modified function to print all the scalar registers
+void sim_t::interactive_fregd_all(const std::string& cmd, const std::vector<std::string>& args)
+{
+  if (args.size() < 1)
+    throw trap_interactive();
+
+  processor_t *p = get_core(args[0]);
+  int max_xlen = p->get_max_xlen();
+
+  std::ostream out(sout_.rdbuf());
+  out << std::hex;
+
+  if (args.size() == 1) {
+    // Show all the fregs!
+    for (int r = 0; r < NFPR; ++r) {
+      out << std::setfill(' ') << std::setw(4) << fpr_name[r]
+          << ": 0x" << std::setfill('0') << std::setw(max_xlen/4)
+          << (p->get_state()->FPR[r]).v[0];
+      if ((r + 1) % 4 == 0)
+        out << std::endl;
+    }
+  }
+}
+
 void sim_t::interactive_fregh(const std::string& cmd, const std::vector<std::string>& args)
 {
   fpr f;
diff --git a/riscv/processor.h b/riscv/processor.h
index fc80914e..d43bc96f 100644
--- a/riscv/processor.h
+++ b/riscv/processor.h
@@ -239,6 +239,8 @@ public:
 
   const isa_parser_t &get_isa() { return *isa; }
 
+  // mp-17: register a vector instruction
+  int is_vec_insn = 0;
   void set_debug(bool value);
   void set_histogram(bool value);
 #ifdef RISCV_ENABLE_COMMITLOG
diff --git a/riscv/sim.h b/riscv/sim.h
index 5787d5d7..48d6e40b 100644
--- a/riscv/sim.h
+++ b/riscv/sim.h
@@ -133,6 +133,8 @@ private:
   void interactive_fregh(const std::string& cmd, const std::vector<std::string>& args);
   void interactive_fregs(const std::string& cmd, const std::vector<std::string>& args);
   void interactive_fregd(const std::string& cmd, const std::vector<std::string>& args);
+  // mp-17: print all the scalar registers
+  void interactive_fregd_all(const std::string& cmd, const std::vector<std::string>& args);
   void interactive_pc(const std::string& cmd, const std::vector<std::string>& args);
   void interactive_mem(const std::string& cmd, const std::vector<std::string>& args);
   void interactive_str(const std::string& cmd, const std::vector<std::string>& args);

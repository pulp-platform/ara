diff --git a/riscv/execute.cc b/riscv/execute.cc
index ee8257f9..a9459a26 100644
--- a/riscv/execute.cc
+++ b/riscv/execute.cc
@@ -273,6 +273,10 @@ void processor_t::step(size_t n)
 
           insn_fetch_t fetch = mmu->load_insn(pc);
           if (debug && !state.serialized)
+            // mp-17: check if the instruction is a vector one
+            if ((disassembler->disassemble(fetch.insn))[0] == 'v') {
+              is_vec_insn = 1;
+            }
             disasm(fetch.insn);
           pc = execute_insn(this, pc, fetch);
           advance_pc();
diff --git a/riscv/interactive.cc b/riscv/interactive.cc
index 22929d43..5406e3ee 100644
--- a/riscv/interactive.cc
+++ b/riscv/interactive.cc
@@ -86,7 +86,7 @@ void sim_t::interactive()
   while (!done())
   {
     std::cerr << ": " << std::flush;
-    std::string s = readline(2);
+    std::string s = readline(0);
 
     std::stringstream ss(s);
     std::string cmd, tmp;
@@ -154,13 +154,29 @@ void sim_t::interactive_run_silent(const std::string& cmd, const std::vector<std
   interactive_run(cmd,args,false);
 }
 
+// mp-17: modify this function to print the whole internal scalar RF state upon a vector instruction
 void sim_t::interactive_run(const std::string& cmd, const std::vector<std::string>& args, bool noisy)
 {
   size_t steps = args.size() ? atoll(args[0].c_str()) : -1;
   ctrlc_pressed = false;
   set_procs_debug(noisy);
-  for (size_t i = 0; i < steps && !ctrlc_pressed && !done(); i++)
+
+  // This is a hack, but we are always using core 0
+  processor_t *p = get_core("0");
+
+  for (size_t i = 0; i < steps && !ctrlc_pressed && !done(); i++) {
+    // Step forward
     step(1);
+    // Check if the fetched instruction was a vector one
+    if (p->is_vec_insn) {
+      // Print the whole F regfile
+      interactive_reg(cmd, {"0"});
+      // Print the whole F regfile
+      interactive_fregd_all(cmd, {"0"});
+      // Clear the flag
+      p->is_vec_insn = 0;
+    }
+  }
 }
 
 void sim_t::interactive_quit(const std::string& cmd, const std::vector<std::string>& args)
@@ -311,6 +327,30 @@ void sim_t::interactive_freg(const std::string& cmd, const std::vector<std::stri
   fprintf(stderr, "0x%016" PRIx64 "%016" PRIx64 "\n", r.v[1], r.v[0]);
 }
 
+// mp-17: modified function to print all the scalar registers
+void sim_t::interactive_fregd_all(const std::string& cmd, const std::vector<std::string>& args)
+{
+  if (args.size() < 1)
+    throw trap_interactive();
+
+  processor_t *p = get_core(args[0]);
+  int max_xlen = p->get_max_xlen();
+
+  std::ostream out(sout_.rdbuf());
+  out << std::hex;
+
+  if (args.size() == 1) {
+    // Show all the fregs!
+    for (int r = 0; r < NFPR; ++r) {
+      out << std::setfill(' ') << std::setw(4) << fpr_name[r]
+          << ": 0x" << std::setfill('0') << std::setw(max_xlen/4)
+          << (p->get_state()->FPR[r]).v[0];
+      if ((r + 1) % 4 == 0)
+        out << std::endl;
+    }
+  }
+}
+
 void sim_t::interactive_fregh(const std::string& cmd, const std::vector<std::string>& args)
 {
   fpr f;
@@ -424,7 +464,7 @@ void sim_t::interactive_until(const std::string& cmd, const std::vector<std::str
   // mask bits above max_xlen
   int max_xlen = procs[strtol(args[1].c_str(),NULL,10)]->get_max_xlen();
   if (max_xlen == 32) val &= 0xFFFFFFFF;
-  
+
   std::vector<std::string> args2;
   args2 = std::vector<std::string>(args.begin()+1,args.end()-1);
 
diff --git a/riscv/processor.h b/riscv/processor.h
index ad6e8929..03ea4cf7 100644
--- a/riscv/processor.h
+++ b/riscv/processor.h
@@ -272,6 +272,8 @@ public:
               FILE *log_file);
   ~processor_t();
 
+  // mp-17: register a vector instruction
+  int is_vec_insn = 0;
   void set_debug(bool value);
   void set_histogram(bool value);
 #ifdef RISCV_ENABLE_COMMITLOG
@@ -444,7 +446,7 @@ private:
   bool halt_on_reset;
   std::vector<bool> extension_table;
   std::vector<bool> impl_table;
-  
+
   entropy_source es; // Crypto ISE Entropy source.
 
   std::vector<insn_desc_t> instructions;
diff --git a/riscv/sim.h b/riscv/sim.h
index 1c47ce75..201c3917 100644
--- a/riscv/sim.h
+++ b/riscv/sim.h
@@ -108,6 +108,8 @@ private:
   void interactive_vreg(const std::string& cmd, const std::vector<std::string>& args);
   void interactive_reg(const std::string& cmd, const std::vector<std::string>& args);
   void interactive_freg(const std::string& cmd, const std::vector<std::string>& args);
+  // mp-17: print all the scalar registers
+  void interactive_fregd_all(const std::string& cmd, const std::vector<std::string>& args);
   void interactive_fregh(const std::string& cmd, const std::vector<std::string>& args);
   void interactive_fregs(const std::string& cmd, const std::vector<std::string>& args);
   void interactive_fregd(const std::string& cmd, const std::vector<std::string>& args);
